import requests
import json
import google.generativeai as genai
import asyncio
import streamlit as st
from google.adk.agents import Agent
from google.adk.sessions import InMemorySessionService # Para prot√≥tipo, usar persistente em prod
from google.adk.runners import Runner
from google.genai import types
import os
import warnings
import logging
import dotenv
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt # Importar Matplotlib
import seaborn as sns
# --- Configura√ß√µes Iniciais ---
dotenv.load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")

genai.configure(api_key=api_key) # osapi vm


idade = [30, 25, 40, 28, 35, 22, 50, 19, 20]
nome = ["joao", "maria", "carlos", "ana", "pedro", "sofia", "ricardo", "Julio", "Davida"]
cidade = ["Luanda", "Sumbe", "Benguela", "Lubango", "Luanda", "Benguela", "Cabinda", "Sumbe", "Luanda"]
profissao = ["Engenheiro", "Designer", "M√©dico", "Professora", "Arquiteto", "Estudante", "Empres√°rio", "Designer", "Engenheiro"]
email = ["joao@example.com", "maria@example.com", "carlos@example.com", "ana@example.com", "pedro@example.com", "sofia@example.com", "ricardo@example.com", "Juliocesar@gmail.com", "David@gmail.com"]

# Dados de exemplo para simular um banco de dados
df = pd.DataFrame(data={"nome": nome, "idade":idade, "cidade": cidade, "profissao":profissao, "email": email})


def get_user_data(nome_usuario: str):
    """
    Retorna os dados de um usu√°rio espec√≠fico do banco de dados.
    Args:
        nome_usuario (str): O nome do usu√°rio a ser consultado (case-insensitive).
    Returns:
        dict: Um dicion√°rio com os dados do usu√°rio ou uma mensagem de erro se n√£o encontrado.
    """
    # Filtra o DataFrame pelo nome do usu√°rio (convertendo para min√∫sculas para compara√ß√£o)
    user_name_lower = df[df.nome.str.lower() == nome_usuario.lower()]

    if user_name_lower.empty:
        # Retorna um dicion√°rio de erro se o usu√°rio n√£o for encontrado
        return {"error": f"Usu√°rio '{nome_usuario}' n√£o encontrado."}
    else:
        # Se um usu√°rio for encontrado, pega a primeira (e √∫nica) linha
        # e converte para um dicion√°rio simples
        return user_name_lower.iloc[0].to_dict()

def add_user(nome: str, idade: int, email:str, cidade: str, profissao: str):
    """
    Adiciona um novo usu√°rio ao banco de dados.
    Args:
        nome (str): O nome do novo usu√°rio.
        idade (int): A idade do novo usu√°rio.
        cidade (str): A cidade do novo usu√°rio.
        email (str): O email do novo usu√°rio.
        profissao (str): A profiss√£o do novo usu√°rio
    Returns:
        dict: Um dicion√°rio indicando o status da opera√ß√£o.
    """
    global df # Permite que a fun√ß√£o modifique o DataFrame global

    # Verifica se o email j√° existe no banco de dados (compara√ß√£o case-insensitive)
    if email.lower() in df.email.str.lower().values:
        return {"status": "error", "message": f"Email '{email}' j√° existe no banco de dados."}
    
    # Cria um novo DataFrame com os dados do usu√°rio (convertendo nome e email para min√∫sculas)
    new_user_df = pd.DataFrame([[nome.lower(), idade, email.lower(), cidade, profissao]], 
                               columns=["nome", "idade", "email", "cidade", "profissao"])
    
    # Concatena o novo usu√°rio ao DataFrame global
    df = pd.concat([df, new_user_df], ignore_index=True)
    return {"status": "success", "message": f"Usu√°rio '{nome}' adicionado com sucesso!"}


def get_time():
    """Retorna a hora atual."""
    now = datetime.now()
    return now.strftime("%H:%M:%S")

def get_weekday():
    """Retorna o dia da semana atual."""
    now = datetime.now()
    return now.strftime("%A")  # Retorna o nome completo do dia da semana, como "Monday", "Tuesday", etc.


def get_user_analytics(cidade: str, profissao: str):
    """
    Retorna todos os usu√°rios que pertencem √† mesma cidade e t√™m as mesmas profiss√µes.
    Args:
        cidade (str): Filtra usu√°rios por cidade.
        profissao (str): Filtra usu√°rios por profiss√£o.
    Returns:
        dict: Um dicion√°rio com a lista de usu√°rios ou uma mensagem de erro.
    """
    # Filtra usu√°rios por cidade e profiss√£o (compara√ß√£o case-insensitive)
    filtered_users = df[((df.cidade.str.lower() == cidade.lower()) & 
                         (df.profissao.str.lower() == profissao.lower()))]

    if filtered_users.empty:
        return {"users": [], "message": f"Nenhum usu√°rio encontrado na cidade '{cidade}' com a profiss√£o '{profissao}'."}
    else:
        # Retorna uma lista de dicion√°rios, onde cada dicion√°rio √© um usu√°rio
        return {"users": filtered_users.to_dict(orient="records")}

def describe():
    """
    Retorna a descri√ß√£o do meu banco de dados
    returns:
        dict: Um dicion√°rio com a descri√ß√£o estat√≠stica do DataFrame.

    """
    return df.describe().to_json(orient="index")

def generate_age_distribution_chart():
    """
    Gera um histograma da distribui√ß√£o de idades dos usu√°rios e retorna o objeto da figura para plotagem.
    Returns:
        matplotlib.figure.Figure or None: O objeto da figura do gr√°fico se for bem-sucedido, caso contr√°rio, None.
    """
    if df.empty or 'idade' not in df.columns:
        # Em vez de retornar um dicion√°rio de erro, retornamos None e o chamador (no Streamlit)
        # pode exibir uma mensagem de erro apropriada.
        st.error("Dados de usu√°rios ou coluna 'idade' n√£o encontrados para gerar o gr√°fico.")
        return None

    # Cria a figura e os eixos
    fig, ax = plt.subplots(figsize=(10, 6))

    # Cria o histograma com KDE usando os eixos criados
    sns.histplot(df['idade'], kde=True, bins=5, color='skyblue', ax=ax)

    # Define os t√≠tulos e r√≥tulos para os eixos do gr√°fico
    ax.set_title('Distribui√ß√£o de Idades dos Usu√°rios')
    ax.set_xlabel('Idade')
    ax.set_ylabel('N√∫mero de Usu√°rios')
    ax.grid(axis='y', alpha=0.75) # Adiciona grade no eixo Y

    plt.tight_layout() # Ajusta o layout para evitar cortes
    
    # N√£o salvamos o gr√°fico, apenas o retornamos
    return fig


@st.cache_resource
def agent_osapi():
    root_agent = Agent(
        name = "osapicare",
        #model="gemini-2.0-flash-exp",
        model= "gemini-2.0-flash-exp",
        # Combine a descri√ß√£o e as instru√ß√µes aqui, ou adicione um novo campo se o ADK suportar explicitamente instru√ß√µes do sistema
        description="""
        Voc√™ √© um agente que retorna a hora atual, o dia atual da semana, os dados de um usu√°rio, adiciona um novo usu√°rio, mostra a estat√≠stica agregada ao usu√°rio, a descri√ß√£o do meu banco de dados.
        Voc√™ deve usar a ferramenta 'get_time' para obter a hora atual.
        Voc√™ deve usar a ferramenta 'get_weekday' para obter o dia da semana atual.
        Voc√ä deve usar a ferramenta 'get_user_data' para obter os dados de um usu√°rio espec√≠fico do banco de dados.
        Voc√™ deve usar a ferramenta 'add_user' para adicionar um novo usu√°rio ao banco de dados.
        Voc√™ deve usar a ferramenta 'get_user_analytics' para fazer a filtra√ß√£o da cidade e profiss√£o dos usu√°rios dentro do banco de dados.
        Voc√™ deve usar a ferramenta 'describe' para obter a descri√ß√£o de como esta o meu banco de dados.
        Voc√™ deve usar a ferramenta 'generate_age_distribution_chart' para gerar um gr√°fico de histograma.
        """,
        tools=[get_time, get_weekday, get_user_data, add_user, get_user_analytics, describe, generate_age_distribution_chart],  # Certifique-se de que essas ferramentas estejam definidas corretamente
        # Se houver um campo para instru√ß√µes espec√≠ficas do modelo, ele seria algo como 'system_instruction' ou 'model_instructions'
        # system_instruction="""Siga as diretrizes de seguran√ßa e bem-estar do usu√°rio.""" # Exemplo, verifique a documenta√ß√£o do ADK
    )
    print(f"Agente '{root_agent.name}'.")
    return root_agent

root_agent = agent_osapi()

APP_NAME = "OSAPICARE"


@st.cache_resource
def get_session_service():
    """
    Cria e retorna o servi√ßo de sess√£o.
    O InMemorySessionService gerencia o hist√≥rico da conversa automaticamente para a sess√£o.
    """
    return InMemorySessionService()

session_service = get_session_service()

@st.cache_resource
def get_adk_runner(_agent, _app_name, _session_service):
    """
    Cria e retorna o runner do ADK.
    """
    adk_runner = Runner(
        agent=_agent,
        app_name=_app_name,
        session_service=_session_service
    )
    print("ADK Runner criado globalmente.")
    return adk_runner

# Passa o agente de notas para o runner
adk_runner = get_adk_runner(root_agent, APP_NAME, session_service) # Passando notes_agent

## Aplica√ß√£o Streamlit

st.title("ü©∫ Gerenciador laboratorial") # T√≠tulo da aplica√ß√£o atualizado

# Inicializa o hist√≥rico de chat no st.session_state se ainda n√£o existir
if "messages" not in st.session_state:
    st.session_state.messages = []

# Exibe mensagens anteriores
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Entrada do usu√°rio
if user_message := st.chat_input("Ol√°! Como posso ajudar voc√™ a gerenciar suas actividades hoje?"):
    # Adiciona a mensagem do usu√°rio ao hist√≥rico do Streamlit
    st.session_state.messages.append({"role": "user", "content": user_message})
    with st.chat_message("user"):
        st.markdown(user_message)

    # Define user_id e session_id.
    user_id = "streamlit_usuario"
    session_id = "default_streamlit_usuario"

    try:
        # Garante que a sess√£o exista no ADK
        # O InMemorySessionService manter√° o estado da sess√£o.
        # N√£o √© ideal tentar criar uma sess√£o que j√° existe, mas para InMemorySessionService,
        # get_session pode ser suficiente para verificar a exist√™ncia.
        existing_session = asyncio.run(session_service.get_session(app_name=APP_NAME, user_id=user_id, session_id=session_id))
        if not existing_session:
            asyncio.run(session_service.create_session(app_name=APP_NAME, user_id=user_id, session_id=session_id))
            print(f"Sess√£o '{session_id}' criada para '{user_id}'.")
        else:
            print(f"Sess√£o '{session_id}' j√° existe para '{user_id}'.")

        # A nova mensagem do usu√°rio a ser enviada ao agente
        new_user_content = types.Content(role='user', parts=[types.Part(text=user_message)])

        async def run_agent_and_get_response(current_user_id, current_session_id, new_content):
            """
            Executa o agente e retorna a resposta final.
            """
            response_text = "Agente n√£o produziu uma resposta final." 
            async for event in adk_runner.run_async(
                user_id=current_user_id,
                session_id=current_session_id,
                new_message=new_content,
            ):
                if event.is_final_response():
                    if event.content and event.content.parts:
                        response_text = event.content.parts[0].text
                    elif event.actions and event.actions.escalate:
                        response_text = f"Agente escalou: {event.error_message or 'Sem mensagem espec√≠fica.'}"
                    break 
            return response_text

        # Executa a fun√ß√£o ass√≠ncrona e obt√©m o resultado
        response = asyncio.run(run_agent_and_get_response(user_id, session_id, new_user_content))

        # Adiciona a resposta do agente ao hist√≥rico do Streamlit
        st.session_state.messages.append({"role": "assistant", "content": response})
        with st.chat_message("assistant"):
            st.markdown(response)

    except Exception as e:
        st.error(f"Erro ao processar a requisi√ß√£o: {e}")
        st.session_state.messages.append({"role": "assistant", "content": f"Desculpe, ocorreu um erro: {e}"})
